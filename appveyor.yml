version: build.{build}.branch.{branch}

image:
  - Visual Studio 2017
  - macos-mojave
  - Ubuntu

environment:
  # MINICONDA_PATH_32: "C:\\Miniconda3"
  # MINICONDA_PATH_64: "C:\\Miniconda3-x64"
  MINICONDA_LINUX_URL: "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"
  MINICONDA_OSX_URL: "https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"
  CIBW_TEST_REQUIRES: pytest
  CIBW_TEST_COMMAND: pytest {project}/tests -m "not pytorch"
  CIBW_BEFORE_BUILD: pip install -r {project}/recipe/cibw_before_requirements.txt
  CIBW_BEFORE_BUILD_LINUX: bash {project}/recipe/cibw_before_build_manylinux.sh
  WIN_OPENBLAS_VER: "0.2.14.1"

clone_depth: 1

stack: python 3.8

# matrix:
#   fast_finish: true

init:
  - ps: >-
      if ($env:APPVEYOR_REPO_TAG -eq "true")
      {
        Update-AppveyorBuild -Version "$($env:APPVEYOR_REPO_TAG_NAME.TrimStart("v"))"
      }
  - sh: >-
      if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu" ]; then
        export DIST=dist-linux;
      else
        export DIST=dist-osx;
        export ACCELERATE=1;
      fi;
  - cmd: set DIST=dist-win

install:
  - sh: >-
      if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" != "Ubuntu" ]; then
        brew install swig;
      fi
  - sh: pip install cibuildwheel==1.8.0

build: script

build_script:
  - sh: CIBW_BUILD="cp37-*" cibuildwheel --output-dir ${DIST}

before_deploy:
  - sh: export MACOSX_DEPLOYMENT_TARGET=10.9
  - sh: export SDKROOT=
  - sh: CIBW_SKIP="cp37-*" cibuildwheel --output-dir ${DIST}
  - cmd: call "C:\Miniconda3-x64\Scripts\activate.bat"
  - cmd: call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
  - sh: >-
      if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu" ]; then
        wget "${MINICONDA_LINUX_URL}" -O miniconda_install.sh;
      else
        curl "${MINICONDA_OSX_URL}" -o miniconda_install.sh;
      fi
  - sh: >-
      chmod +x miniconda_install.sh;
      ./miniconda_install.sh -b -p "${HOME}/miniconda3";
      source "${HOME}/miniconda3/etc/profile.d/conda.sh";
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q --all
  - conda install conda-build
  - conda build recipe -m recipe/ci_build.yaml
  - conda activate base
  - cmd: python recipe\copy_conda_build_packages.py pydrobert-kaldi %DIST%
  - sh: python recipe/copy_conda_build_packages.py pydrobert-kaldi ${DIST}
  - cmd: 7z a %DIST%.zip %DIST%
  - sh: zip -r ${DIST}.zip ${DIST}
  - ps: Push-AppVeyorArtifact $env:DIST".zip"

branches:
  except:
    - /docs.*/

# after_test:
#   - conda activate base
#   - cmd: mkdir dist-win-py%CONDA_PY%\win-64
#   - cmd: python recipe\copy_conda_build_packages.py pydrobert-kaldi dist-win-py%CONDA_PY%/win-64
#   - cmd: if errorlevel 1 exit 1
#   - cmd: 7z a dist-win-py%CONDA_PY%.zip %cd%\dist-win-py%CONDA_PY%
#   - sh: >-
#       if [ "${APPVEYOR_BUILD_WORKER_IMAGE}" = "Ubuntu" ]; then
#         DIST=dist-linux-py${CONDA_PY}/linux-64;
#       else
#         DIST=dist-osx-py${CONDA_PY}/osx-64;
#       fi;
#       mkdir -p $DIST;
#       python recipe/copy_conda_build_packages.py pydrobert-kaldi $DIST;
#       zip -r $(dirname $DIST).zip $DIST

deploy:
  - provider: GitHub
    description: pydrobert-kaldi version $(appveyor_build_version)
    artifact: /.*\.zip/
    auth_token:
      secure: hALzL1jnrc8sTk3Plujt2pVy4Vrxi9sM+CO5VbGsQx0P6Hr1J91fPVWd/+AueZ4h
    on:
      appveyor_repo_tag: true
  - provider: GitHub
    tag: appveyor_dummy
    description: a dummy deployment
    artifact: /.*\.zip/
    auth_token:
      secure: hALzL1jnrc8sTk3Plujt2pVy4Vrxi9sM+CO5VbGsQx0P6Hr1J91fPVWd/+AueZ4h
    draft: true
    prerelease: true
    on:
      branch: /appveyor.*/